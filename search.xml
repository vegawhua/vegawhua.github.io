<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript高级教程</title>
      <link href="/2022/03/06/Javascript%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/06/Javascript%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Drum Kit项目</p><h2 id="Event-Listener"><a href="#Event-Listener" class="headerlink" title="Event Listener"></a>Event Listener</h2><p>事件监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfDrumButtons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.drum&quot;</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numberOfDrumButtons; i++) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.drum&quot;</span>)[i].<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;I got clicked!&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中级教程</title>
      <link href="/2022/03/03/Javascript%E4%B8%AD%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/03/Javascript%E4%B8%AD%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Pure-JS"><a href="#Pure-JS" class="headerlink" title="Pure JS"></a>Pure JS</h1><h2 id="Randomization-随机化"><a href="#Randomization-随机化" class="headerlink" title="Randomization 随机化"></a>Randomization 随机化</h2><p><code>Math.random();</code> - [0,1)间的16位小数</p><p>pseudo random number generator 伪随机数发生器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">n *= <span class="number">6</span></span><br><span class="line">n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n) + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br></pre></td></tr></table></figure><h2 id="Control-flow-控制流"><a href="#Control-flow-控制流" class="headerlink" title="Control flow 控制流"></a>Control flow 控制流</h2><h3 id="If-x2F-else"><a href="#If-x2F-else" class="headerlink" title="If&#x2F;else"></a>If&#x2F;else</h3><blockquote><p><code>a === b</code> vs. <code>a == b</code></p><p>三个等号检查value+data type，两个等号不care data type.</p></blockquote><p><code>&amp;&amp;</code> <code>||</code> <code>!</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isLeap</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Leap year.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">100</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Leap year.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not leap year.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isLeap</span>(<span class="number">1989</span>);</span><br></pre></td></tr></table></figure><h3 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ ) &#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> count = <span class="number">1</span>; count &lt;= <span class="number">100</span>; count ++) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>When <code>While</code> When <code>For</code>？</p><p>while是检查一个状态，something is true – State</p><p>for是在某种状态时重复运行指令，尝试迭代 – Iterate</p></blockquote><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> guestList = [<span class="string">&quot;Vega&quot;</span>, <span class="string">&quot;Ryan&quot;</span>, <span class="string">&quot;Lynn&quot;</span>];</span><br><span class="line">guestList.<span class="title function_">includes</span>(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="FizzBuzz"><a href="#FizzBuzz" class="headerlink" title="FizzBuzz"></a>FizzBuzz</h2><p><code>array.push()</code> - 添加到数组末尾</p><p><code>array.pop()</code> - 获取最后一项并删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> output = [];</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fizzBuzz</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; count % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fibonacci-Solution"><a href="#Fibonacci-Solution" class="headerlink" title="Fibonacci Solution"></a>Fibonacci Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacciGenerator</span> (n) &#123;</span><br><span class="line"><span class="comment">//Do NOT change any of the code above 👆</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Write your code here:</span></span><br><span class="line">    <span class="keyword">var</span> output = [];</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            output.<span class="title function_">push</span>(output[output.<span class="property">length</span> - <span class="number">2</span>] + output[output.<span class="property">length</span> - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Return an array of fibonacci numbers starting from 0.</span></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line"><span class="comment">//Do NOT change any of the code below 👇</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>JS类型：</p><ul><li>Inline</li><li>Internal</li><li>External - 建议放在html最后，没有element的话js是执行不了的</li></ul><p><strong>DOM</strong> - Document Object Model 文档对象模型</p><p>将网页分类为我们可以选择和操作的单个obj</p><p>obj包含Properties属性 和 Methods方法</p><p>Properties:</p><ul><li>Get Property - <code>car.colour;</code> </li><li>Set Property - <code>car.numberOfDoors = 0;</code></li></ul><p>Methods:</p><ul><li>Call Method - <code>car.drive()</code></li></ul><blockquote><p>Method和Properties区别：</p><p>Method需要object，必须和对象相关联，会有括号</p><p>Properties本质上是对象可以执行的功能</p></blockquote><p><code>.innerHTML</code> - 获取某个元素的HTML内容</p><h2 id="Selecting-elements-with-JS"><a href="#Selecting-elements-with-JS" class="headerlink" title="Selecting elements with JS"></a>Selecting elements with JS</h2><p>​        —-以下方法更广泛—-</p><ul><li><p><code>document.getElementsByTagName(&quot;li&quot;)[2].style.color=&quot;red&quot;;</code></p></li><li><p><code>document.getElementsByClassName(&quot;btn&quot;);</code></p></li><li><p><code>document.getElementById</code> - ID都是唯一的，所以是element没有复数</p><p>—-以下允许更复杂的查询，用的更多—-</p></li><li><p><code>document.querySelector()</code> - 支持tag &#x2F; class &#x2F; id，.class #id</p><ul><li><code>document.querySelector(&quot;li a&quot;);</code></li><li><code>document.querySelector(&quot;li.list&quot;);</code></li><li><code>document.querySelector(&quot;#list a&quot;);</code></li></ul></li><li><p><code>document.querySelectorAll()</code></p></li></ul><h2 id="Manipulate"><a href="#Manipulate" class="headerlink" title="Manipulate"></a>Manipulate</h2><h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><ul><li><p>JS命名-驼峰法Camel Case - CSS: <code>font-size</code> &#x2F; JS: <code>fontSize</code></p></li><li><p>设置的value必须为字符串！！<code>document.querySelector(&quot;h1&quot;).style.fontSize=&quot;10rem&quot;;</code></p></li></ul><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">innerHTML</span>;</span><br></pre></td></tr></table></figure><ul><li><code>.innerHTML</code> - 获取某个元素的HTML内容<ul><li>返回<code>&lt;strong&gt;Hello&lt;/strong&gt;</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">textContent</span>;</span><br></pre></td></tr></table></figure><ul><li><code>.textContent</code> - 仅获取文字<ul><li>返回<code>&quot;Hello&quot;</code></li></ul></li></ul><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>atom里橘色的就是属性！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>).<span class="property">attributes</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://www.bing.com&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="The-Separation-of-Concerns-Structure-vs-Style-vs-Behaviour"><a href="#The-Separation-of-Concerns-Structure-vs-Style-vs-Behaviour" class="headerlink" title="The Separation of Concerns: Structure vs Style vs Behaviour"></a>The Separation of Concerns: Structure vs Style vs Behaviour</h2><p>class list 类列表 - 可以使所有样式保留在CSS中，但是JS可以打开或者关闭它。</p><hr><h2 id="The-dice-game-骰子游戏"><a href="#The-dice-game-骰子游戏" class="headerlink" title="The dice game 骰子游戏"></a>The dice game 骰子游戏</h2><p>感想：很简单，但是我是二傻子，<code>img1</code> <code>img2</code>都是class，.querySelector的时候需要<code>querySelector(&quot;.img1&quot;)</code>，同理，id的话就是#img1，只有tag name直接写没符号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> randomNumber1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> randomNumber2 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.img1&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;images/dice&quot;</span> + randomNumber1 + <span class="string">&quot;.png&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.img2&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;images/dice&quot;</span> + randomNumber2 + <span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (randomNumber2 &gt; randomNumber1) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">textContent</span> = <span class="string">&quot;Player 2 Wins! 🚩&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (randomNumber1 === randomNumber2) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">textContent</span> = <span class="string">&quot;Draw!&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">textContent</span> = <span class="string">&quot;🚩 Player 1 Wins!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Notes</title>
      <link href="/2022/03/02/Javascript-Notes/"/>
      <url>/2022/03/02/Javascript-Notes/</url>
      
        <content type="html"><![CDATA[<h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>js: small script language that was meant to add some animations to websites or allow a little bit of user interaction。以前只在前端，现在在前后端还有中间地带的框架中都能看到JS。</p><p>适配性最好，all browsers support</p><blockquote><p>Java vs. JavaScript 就像car和carpet，只是想在js上用java这个词，实际上大不同。</p><p>JS is an interpreted programming language; Java is a compiled编译 programming language. </p></blockquote><table><thead><tr><th>Interpreted</th><th>Compiled</th></tr></thead><tbody><tr><td>JavaScript</td><td>Java</td></tr><tr><td>Python</td><td>C&#x2F;C++</td></tr><tr><td>Ruby</td><td>Swift</td></tr></tbody></table><p>解释型语言必须逐行执行所有指令</p><p>编译型语言被视为more serious languages，最终会得到运行速度非常快的程序</p><h2 id="JS-in-Chrome"><a href="#JS-in-Chrome" class="headerlink" title="JS in Chrome"></a>JS in Chrome</h2><ol><li><p>View - Developer - JavaScript Console</p><p>换行需要<code>shift</code>+<code>enter</code>，不然会丢失代码进度</p></li><li><p>F12 - Sources - <code>&gt;&gt;</code> - Snippets - +New snippet - index.js，完整写完后<code>command</code>+<code>enter</code>执行</p></li></ol><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p><code>alert(&quot;Hello&quot;);</code><br>function (Message) End<code>;</code></p><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><p>Concatenation</p></li><li><p>Length - <code>word.length</code></p></li><li><p>Slice and extract parts of string - <code>name_of_variable.slice(x, y)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只显示140个字符的内容</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">prompt</span>(<span class="string">&quot;Compose your tweet:&quot;</span>).<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">140</span>));</span><br></pre></td></tr></table></figure></li><li><p>Casing in the string - <code>word.toUpperCase()</code> <code>word.toLowerCase()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="title function_">prompt</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> firstChar = name.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">firstChar = firstChar.<span class="title function_">toUpperCase</span>();</span><br><span class="line"><span class="keyword">var</span> restOfName = name.<span class="title function_">slice</span>(<span class="number">1</span>, name.<span class="property">length</span>);</span><br><span class="line">restOfName = restOfName.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Welcome there, &quot;</span> + firstChar + restOfName);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><p><code>x++</code> - increment expression增量表达式</p><p><code>x--</code> - decrement expression递减表达式</p><p><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code></p><p><code>Math.floor(money / 1.5)</code> - round down</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><h2 id="JavaScript-Variables"><a href="#JavaScript-Variables" class="headerlink" title="JavaScript Variables"></a>JavaScript Variables</h2><p><code>prompt();</code>和alert很像但是允许用户输入内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;Vega&quot;</span>;</span><br><span class="line"><span class="comment">// var: 创建新变量的keyword</span></span><br><span class="line"><span class="comment">// myName: variable name</span></span><br><span class="line"><span class="comment">// &quot;Vega&quot;: value</span></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p><code>getmilk()</code> 进阶之路</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMilk</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)  </span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMilk</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)</span><br><span class="line">  <span class="keyword">var</span> bottles = <span class="title class_">Math</span>.<span class="title function_">floor</span>(money / <span class="number">1.5</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;buy &quot;</span> + bottles + <span class="string">&quot; bottles of Milk&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...)  </span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMilk</span>(<span class="params">money</span>) &#123;   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leaveHouse&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;moveRight&quot;</span>);</span><br><span class="line">  ....</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;buy &quot;</span> + <span class="title function_">calcBottles</span>(money, <span class="number">1.5</span>) + <span class="string">&quot; bottles of milk.&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;moveLeft&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;moveLeft&quot;</span>);</span><br><span class="line">  ....</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">calcChange</span>(money, <span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcBottles</span>(<span class="params">startingMoney, costPerBottle</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfBottles = <span class="title class_">Math</span>.<span class="title function_">floor</span>(startingMoney / costPerBottle);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> numberOfBottles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcChange</span>(<span class="params">startingMoney, costPerBottle</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> change = startingMoney % costPerBottle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> change;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello master, here is your &quot;</span> + <span class="title function_">getMilk</span>(<span class="number">5</span>) + <span class="string">&quot; change.&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN Intuition</title>
      <link href="/2022/02/25/CNN-Intuition/"/>
      <url>/2022/02/25/CNN-Intuition/</url>
      
        <content type="html"><![CDATA[<h2 id="CNN-Intuition"><a href="#CNN-Intuition" class="headerlink" title="CNN Intuition"></a>CNN Intuition</h2><p>CNN <font color="red">C</font>onvolutional  <font color="red">N</font>eural  <font color="red">N</font>etwork</p><p><strong>擅长识别图像</strong> ：Input Image –&gt; <strong>CNN</strong> –&gt; Output Lable (Image class)</p><p><strong>电脑识别图像</strong>：</p><ul><li>黑白2*2：2d array 二维数组，0和1组成的灰度信息</li><li>彩色2*2：3d array 三维数组，blue layer &#x2F; green layer &#x2F; red layer 一个像素具有三个值，每个都在0~255间</li></ul><p><strong>所有的图像都这样处理</strong>：</p><ol><li>卷积 convolution</li><li>最大池化 max pooling</li><li>平坦化 flattening</li><li>全连接 full connection</li></ol><h2 id="CNN-Building"><a href="#CNN-Building" class="headerlink" title="CNN Building"></a>CNN Building</h2><h3 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h3><p>$$<br>(f * g)(t)\overset{def}{&#x3D;}\int_{-\infty}^{\infty}f(\tau)g(t-\tau)d\tau<br>$$</p><p>Convolution就是<strong>两个函数的综合整合</strong>（加权叠加），它展示了一个函数怎样修改另一个函数的曲线形状。</p><hr><p><font color="red">Input Image * Feature Detector &#x3D; Feature Map</font></p><p><strong>Feature Detector</strong>（Kernel核 or Filter过滤器） -  大部分时候是3*3的</p><ul><li>Sharpen 锐化</li><li>Blur 模糊化</li><li><del>Edge Enhance 边界增强</del></li><li><font color="red">Edge Detect 边缘探测</font></li><li><del>Emboss 浮凸</del></li></ul><p><strong>Feature Map</strong>（Convolved Feature卷积特征 or Activation Map激活图） - 保留特征</p><p><strong>Stride</strong>步长 - 通常是2，指每次移动过滤器的距离</p><p><strong>工作流程</strong>：</p><ol><li>将detector附在image上，扣出3*3的矩阵，再乘以特征探测器，两个矩阵的点乘结果值 element-wise multiplication填入map，Stride决定detector一次右移多少格，如此反复，直到map填满。</li><li>换一个detector重复</li><li>生成很多很多张feature maps - <strong>卷积层Convolutional Layer</strong></li></ol><p><strong>结果</strong>：</p><p>map会小于image大小，即<strong>压缩了图像</strong>，stride步长越大，压缩程度越高，处理速度也就越快，但是可能会<strong>丢失特征</strong>。</p><blockquote><p><font color = "red">Convolution卷积的目的是：</font></p><p>使用Feature Detectors找到图像的features，并放入Feature Maps里，通过Feature Maps保留了像素互相之间的特殊关系；如果没有保留这种关系，我们就会失去对应的图案和信息。</p></blockquote><h4 id="ReLU-Layer"><a href="#ReLU-Layer" class="headerlink" title="ReLU Layer"></a>ReLU Layer</h4><p>线性整流函数</p><p>在Input Image –&gt; Convolutional Layer之上，使用<strong>整流函数 Rectifier function</strong>，包括两个步骤</p><ol><li>卷积运算</li><li>整流</li></ol><p><strong>目的</strong>：因为图像通常是<strong>高度非线性的</strong>，尤其是识别相邻的不同物体或只识别一个背景下的一个物体时，但同时，当我们进行卷积运算或运行特征探测算法去建立Feature maps时，会引进一些线性的东西，所以我们需要<font color="red">提高</font>图像里或NN里或CNN里的<font color="red">非线性</font>，<font color="red">整流器Rectifier</font>在这里类似于过滤器，或者说是<font color="red">打破线性</font>。</p><h3 id="Max-Pooling"><a href="#Max-Pooling" class="headerlink" title="Max Pooling"></a>Max Pooling</h3><p><strong>Pooling Concept and Usage</strong>:</p><p>引出：图像会从很多个角度或很多种环境下拍摄出来，比如拍cheetah，脸可能都不在正面，可能被rotate可能被压缩，那如果让CNN识别出它们都是cheetah呢？</p><p>–&gt; 所以我们必须确保我们的NN拥有<font color="red">空间不变性 Spatial invariance</font> - 它不需要关心特征位于哪里，因为我们在制作convolutional layer的时候，已经考虑进去了 - <font color="red">这就是Pooling的功能</font></p><p><strong>Speices</strong>:</p><ul><li><font color="red">Max Pooling</font></li><li>Some Pooling</li><li>Mean Pooling</li></ul><p><strong>Work</strong>:</p><p><strong>运用在feature map已产生要与卷积层合作之前！</strong></p><p>Feature Map —-Max Pooling—-&gt; Pooled Feature Map</p><ol><li>在Feature Map上选一个2*2像素的方框，只保留方框内数值的MAX，填入Pooled Feature Map</li><li>选择步长Stride，通常是2</li><li>重复操作，直至末尾</li></ol><blockquote><p><font color = "red">Pooling池化的目的是：</font></p><ul><li><strong>算法可以容忍任何的扭曲distortion</strong> - 删除75%不是特征的信息（2*2只取一个数，只保留了25%）</li><li>引入了<strong>空间不变性 Spatial invariance</strong>，缩减了尺寸，给数据处理带来了帮助。</li><li>！缩减了<strong>参数的数量</strong>，避免了过拟合 - 因为留下的信息是互不相关的，非线性的。</li></ul></blockquote><p><strong>Result</strong>:</p><p>Input Image –Convolution–&gt; Convolutional Layer–Pooling–&gt; Pooling Layer（小一号）</p><h3 id="Flattening"><a href="#Flattening" class="headerlink" title="Flattening"></a>Flattening</h3><h3 id="Full-Connection"><a href="#Full-Connection" class="headerlink" title="Full Connection"></a>Full Connection</h3><h2 id="如何预测单个图像中的内容"><a href="#如何预测单个图像中的内容" class="headerlink" title="如何预测单个图像中的内容"></a>如何预测单个图像中的内容</h2><h2 id="如何改进CNN"><a href="#如何改进CNN" class="headerlink" title="如何改进CNN"></a>如何改进CNN</h2>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
          <category> CNN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Development and Web Design Tips</title>
      <link href="/2022/02/23/Web-Development-Tips/"/>
      <url>/2022/02/23/Web-Development-Tips/</url>
      
        <content type="html"><![CDATA[<h2 id="Code-Refactoring"><a href="#Code-Refactoring" class="headerlink" title="Code Refactoring"></a>Code Refactoring</h2><p>代码重构</p><p>Refactor code on a regular basis in order to keep it performant and easy</p><p>Rules:</p><ol><li><p>Readability 可读性</p><p>逻辑性</p><p>是否对内容进行了注释</p><p>能否快速理解</p></li><li><p>Modularity 模块化</p><p>出现故障时是否能缩小导致问题的代码以找到确切发生问题的部分</p></li><li><p>Efficiency</p><p>代码运行速度</p></li><li><p>Length</p><p>不在代码中重复</p><p>Don’t</p><p>Repeat</p><p>Yourself</p></li></ol><h2 id="Web-Design"><a href="#Web-Design" class="headerlink" title="Web Design"></a>Web Design</h2><h3 id="Color-Theory"><a href="#Color-Theory" class="headerlink" title="Color Theory"></a>Color Theory</h3><table><thead><tr><th>Color</th><th>Meaning</th><th>Example</th></tr></thead><tbody><tr><td>Red</td><td>Love. Energy. Intensity.</td><td>Car ads</td></tr><tr><td>Yello</td><td>Joy. Intellect. Attention.</td><td>Logo&#x2F;title可以，长时间看的不行，太刺眼了</td></tr><tr><td>Green</td><td>Freshness. Safety. Growth.</td><td>Food company</td></tr><tr><td>Blue</td><td>Stability. Trust. Serenity.</td><td>Paypal</td></tr><tr><td>P</td><td>Royalty. Wealth. Femininity.</td><td>针对女性的</td></tr></tbody></table><p>想传递什么信息 –&gt; 选什么颜色 –&gt; combining color</p><h3 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a>Typography</h3><h3 id="UI-Design"><a href="#UI-Design" class="headerlink" title="UI Design"></a>UI Design</h3><p>User Interface Design, What should be considered?</p><ol><li><p>Hierarchy</p><p>展示最重要的信息，突出</p><ul><li>Color</li><li>Size</li></ul></li><li><p>Layout</p><p>Words: 40-60 characters per row最为舒适</p></li><li><p>Alignment 对齐</p></li><li><p>White Space 留白</p><p>留白多就会显得更贵更专业</p></li><li><p>Audience</p><p>考虑受众的需求，比如小朋友的东东就要卡通点，不可能黑白的</p></li></ol><h3 id="UX-Design"><a href="#UX-Design" class="headerlink" title="UX Design"></a>UX Design</h3><p>目标是：简单不刻意，但是又很舒服</p><p>User Experience Design, what should be considered?</p><ol><li><p>Simplicity</p><p>不密集，配色排版让人舒适</p></li><li><p>Consistency</p><p>保持设计一致，产品功能一致</p></li><li><p>Reading Patterns</p><ol><li>F-layout：最重要的东东都靠左边放</li><li>Z-layout</li></ol></li><li><p>All Platform Design</p><p>Mobile responsive is really important.</p><p>Test more, give it to all kinds of users.</p></li><li><p>Don’t use your powers for evil 别玩把戏，好好做设计</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANN Performance and Tuning</title>
      <link href="/2022/02/22/ANN-Performance-and-Tuning/"/>
      <url>/2022/02/22/ANN-Performance-and-Tuning/</url>
      
        <content type="html"><![CDATA[<p>引出：第一次epoch100次训练，accuracy是0.86，第二次的accuracy只有0.84了。</p><p>这说明accuracy并不是评估这个模型的最佳指标！</p><p>引入：方差权衡 bias-variance tradeoff</p><blockquote><p>当我们训练一个模型时，不仅要求准确率，训练多次时所得的多个准确率的方差要足够小</p></blockquote><p>仅仅用一个测试集数据的准确率来评估模型性能是不够的</p><p>更好的方法来衡量模型的性能 - <font color="red">K折交叉验证</font> k-fold cross-validation</p><h2 id="Measure-K-fold-cross-validation"><a href="#Measure-K-fold-cross-validation" class="headerlink" title="Measure - K-fold cross-validation"></a>Measure - K-fold cross-validation</h2><blockquote><p>Keras建的模型，k-fold在scikit-learn里，所以需要可以结合两者的包</p><p><code>from keras.wrappers.scikit_learn import KerasClassifier</code></p><p><code>from sklearn.model_selection import cross_val_score</code></p></blockquote><ol><li>定义一个<code>build_classifier</code>，重新建立ANN模型</li><li>使用<code>KerasClassifier</code>build分类器，定义<code>batch_size</code>和<code>epoch</code></li><li>设置新变量<code>accuracies</code>，将10个accuracy存储于其中</li><li>求<code>accuracies</code>平均值和方差</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.wrappers.scikit_learn <span class="keyword">import</span> KerasClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_classifier</span> ():</span><br><span class="line">    </span><br><span class="line">    classifier = Sequential()</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;relu&quot;</span>, units = <span class="number">6</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>, input_dim = <span class="number">11</span>))</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;relu&quot;</span>, units = <span class="number">6</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>))</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;sigmoid&quot;</span>, units = <span class="number">1</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>))</span><br><span class="line">    classifier.<span class="built_in">compile</span>(optimizer = <span class="string">&quot;adam&quot;</span>, loss = <span class="string">&#x27;binary_crossentropy&#x27;</span>, metrics = [<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> classifier</span><br><span class="line"></span><br><span class="line">classifier = KerasClassifier(build_fn = build_classifier, batch_size = <span class="number">10</span>, nb_epoch = <span class="number">100</span>)</span><br><span class="line">accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = <span class="number">10</span>, n_jobs = -<span class="number">1</span>)</span><br><span class="line">mean = accuracies.mean()</span><br><span class="line">variance = accuracies.std()</span><br></pre></td></tr></table></figure><h2 id="Improve"><a href="#Improve" class="headerlink" title="Improve"></a>Improve</h2><p>引入：</p><blockquote><p>判断Overfitting: 模型用train set训练太多次，以至于它预测测试集的性能大幅降低，</p><ol><li><p><font color="red">训练集数据的准确率</font>和<font color="red">测试集数据的准确率</font>的<font color="red">巨大差异</font>来发现这个问题。</p><p>e.g. 训练集准确率 &gt;&gt; 测试集准确率</p></li><li><p>用<font color="red">K-fold cross-validation</font>的时候出现<font color="red">high variance</font>高方差</p></li></ol></blockquote><h3 id="Solving-Overfitting"><a href="#Solving-Overfitting" class="headerlink" title="Solving Overfitting"></a>Solving Overfitting</h3><h4 id="丢弃正则化法-dropout-regularization"><a href="#丢弃正则化法-dropout-regularization" class="headerlink" title="丢弃正则化法 dropout regularization"></a>丢弃正则化法 dropout regularization</h4><p><strong>原理：</strong></p><p>在train的每一次iteration中，ANN里的一些neurons will be banned randomly, 以预防neurons在学习数据间关系的时候变得互相过度依赖。通过覆盖这些neurons，NN可以学到数之间几种互不相关的关系：因为每一次iteration中，所用到的neurons和它们的distribution都不同。</p><p><strong>由于我们让各神经元更独立地计算，我们就可以得到数据中这些independent correlations</strong></p><blockquote><p>防止过度学习 –&gt; 防止overfitting</p></blockquote><p><strong>运行：</strong></p><ol><li><p><code>from keras.layers import Dropout</code></p></li><li><p>把<code>Dropout</code>应用于网络层上 - 如果有overfitting的情况，需要apply到所有层 - 更加有可能减少过拟合</p><blockquote><p>参数；</p><p><code>P</code>: 0-1，代表需要丢弃的neurons比例，建议先从0.1开始，如果应用后还是有过拟合问题，再逐步加大丢弃比例；如果到<font color="red">1</font>还是有过拟合问题，则代表是<font color="red">欠拟合underfitting</font>，这代表没有任何神经元可以用来学习任何东西；一般来讲<font color="red"><code>P</code>≤0.5</font>，就不会有underfitting的风险。</p></blockquote><p>如何改进模型的性能</p></li></ol><h3 id="Parameter-Tuning"><a href="#Parameter-Tuning" class="headerlink" title="Parameter Tuning"></a>Parameter Tuning</h3><ol><li><p>训练过程中模型学习到的参数（i.e. 权重）</p></li><li><p>保持不变的参数 - <font color="red">超参数 hyper parameters</font></p><p><code>batch_size</code>|  <code>epoch</code> &#x2F; <code>nb_epoch</code> | <code>optimizer</code></p><p>改动这些设置，会让交叉验证得到一个更好的准确率 - 找到这些超参数的<strong>最佳设置</strong></p></li></ol><h4 id="Grid-Search-网格搜索"><a href="#Grid-Search-网格搜索" class="headerlink" title="Grid Search 网格搜索"></a>Grid Search 网格搜索</h4><p>原理：测试超参数值的组合，并最终得到最佳组合</p><p>步骤：</p><ol><li>导入<code>GridSearchCV</code> class</li><li>构建build ANN的分类器函数，！需要给函数添加一个新参数，optimizer，需要调试它</li><li>建立ANN model，这次不需要epoch和batch_size，要grid search以后自动调出参数</li><li>建立一个dictionary，用来存储需要tune的超参数和它们的值</li><li>开始完成grid search，导入<code>GridSearchCV</code>class并给它建立一个对象<code>grid_search</code>，来储存<code>estimator = classifier</code> <code>param_grid = parameters</code> <code>scoring = &#39;accuracy&#39;</code> <code>cv = 10</code>，包含了classifier、参数dict、评分指标scoring metric和K-fold cross validation</li><li><code>grid_search</code>对象拟合训练集 - 用<code>.fit()</code></li><li>定义两个新变量存储参数最优选<code>best_parameters</code>和模型最优准确率<code>best_accuracy</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tuning the ANN</span></span><br><span class="line"><span class="keyword">from</span> keras.wrappers.scikit_learn <span class="keyword">import</span> KerasClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_classifier</span> (optimizer):</span><br><span class="line">    </span><br><span class="line">    classifier = Sequential()</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;relu&quot;</span>, units = <span class="number">6</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>, input_dim = <span class="number">11</span>))</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;relu&quot;</span>, units = <span class="number">6</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>))</span><br><span class="line">    classifier.add(Dense(activation = <span class="string">&quot;sigmoid&quot;</span>, units = <span class="number">1</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>))</span><br><span class="line">    classifier.<span class="built_in">compile</span>(optimizer = optimizer, loss = <span class="string">&#x27;binary_crossentropy&#x27;</span>, metrics = [<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> classifier</span><br><span class="line"></span><br><span class="line">classifier = KerasClassifier(build_fn = build_classifier)</span><br><span class="line">parameters = &#123;<span class="string">&#x27;batch_size&#x27;</span>:[<span class="number">25</span>, <span class="number">32</span>], </span><br><span class="line">              <span class="string">&#x27;nb_epoch&#x27;</span>:[<span class="number">100</span>, <span class="number">200</span>], </span><br><span class="line">              <span class="string">&#x27;optimizer&#x27;</span>: [<span class="string">&#x27;adam&#x27;</span>, <span class="string">&#x27;rmsprop&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(estimator = classifier, </span><br><span class="line">                           param_grid = parameters,</span><br><span class="line">                           scoring = <span class="string">&#x27;accuracy&#x27;</span>,</span><br><span class="line">                           cv = <span class="number">10</span>)</span><br><span class="line">grid_search = grid_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_parameters = grid_search.best_params_</span><br><span class="line">best_accuracy = grid_search.best_score_</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
          <category> ANN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data preprocessing</title>
      <link href="/2022/02/21/Data%20preprocessing/"/>
      <url>/2022/02/21/Data%20preprocessing/</url>
      
        <content type="html"><![CDATA[<h2 id="Import-libraries"><a href="#Import-libraries" class="headerlink" title="Import libraries"></a>Import libraries</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matpoltlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="Import-dataset"><a href="#Import-dataset" class="headerlink" title="Import dataset"></a>Import dataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = pd.read_csv(<span class="string">&#x27;Data.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>特征（自变量）是用来预测因变量的列</li><li>特征矩阵 matrix of features</li><li>因变量向量 dependent variable vector</li></ul><h2 id="Deal-with-missing-data"><a href="#Deal-with-missing-data" class="headerlink" title="Deal with missing data"></a>Deal with missing data</h2><ol><li><p>Deleting directly</p></li><li><p>Using <strong>toolkit</strong> to <strong>replace</strong> the missing value by the <strong>average of all the values in the column</strong> in which the data is missing.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line">imputer = SimpleImputer(missing_values=np.nan, strategy=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line">imputer.fit(x[:, <span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">x[:, <span class="number">1</span>:<span class="number">3</span>] = imputer.transform(x[:, <span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>建议选择所有的<strong>数字列</strong>进行缺失值预处理</p></li></ol><h2 id="Encoding-catagorical-data"><a href="#Encoding-catagorical-data" class="headerlink" title="Encoding catagorical data"></a>Encoding catagorical data</h2><p>编码分类数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line">ct = ColumnTransformer(transformers = [(<span class="string">&#x27;encoder&#x27;</span>, OneHotEncoder(), [<span class="number">0</span>])], remainder = <span class="string">&#x27;passthrough&#x27;</span>)</span><br><span class="line">x = np.array(ct.fit_transform(x))</span><br></pre></td></tr></table></figure><p>把三个不同的国家分别用100, 001和010表示</p><p>![image-20220221214725545](&#x2F;Users&#x2F;vegahuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220221214725545.png)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line">le = LabelEncoder()</span><br><span class="line">y = le.fit_transform(y)</span><br></pre></td></tr></table></figure><p>![image-20220221215239368](&#x2F;Users&#x2F;vegahuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220221215239368.png)</p><h2 id="Splitting-the-dataset-into-Training-set-and-Test-set"><a href="#Splitting-the-dataset-into-Training-set-and-Test-set" class="headerlink" title="Splitting the dataset into Training set and Test set"></a>Splitting the dataset into Training set and Test set</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.2</span>, random_state = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>random_state: 1是保证每次拆分结果相同</li></ul><h2 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h2><p>特征缩放： 确保所有数据都以相同的比例取值，防止一个特征被另一个特征支配从而被忽略影响最后<font color="red">结果</font>。</p><ul><li><p>Standardlisation（Recommend）<br>$$<br>X_{stand} &#x3D; \frac{x - mean(x)}{standarddeviation (x)}<br>$$<br>Put all the values of the feature between around <font color="red">-3 ~3</font></p></li><li><p>Normalisation<br>$$<br>X_{norm} &#x3D; \frac{x - min(x)}{max(x)- min(x)}<br>$$<br>Put all the values of the feature between around <font color="red">0-1</font></p><p>适用范围：</p><p>When you have a normal distribution in most of your features.</p><p>当大多数特征都正态分布时</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">sc = StandardScaler()</span><br><span class="line">x_train[:, <span class="number">3</span>:] = sc.fit_transform(x_train[:, <span class="number">3</span>:])</span><br><span class="line">x_test[:, <span class="number">3</span>:] = sc.transform(x_test[:, <span class="number">3</span>:])</span><br></pre></td></tr></table></figure><ul><li><code>fit</code>：得到每个特征的mean和standard deviation</li><li><code>transform</code>： 将所有值转换成相同的scale</li><li><code>x_train</code>需要<code>fit_transform</code>，但是<code>x_test</code>只需要<code>transform</code>，因为<code>fit</code>的数据应该训练后机器自己获得的，我们需要将训练集上使用的技能同样应用到测试集上，这样才能真正得到相同的转换。</li></ul><blockquote><p>Q：为什么先拆分数数据集再进行特征缩放？</p><p>A：拆分前特征缩放的话，会得到所有值的均值和标准差，包括测试集中的值，会知道在训练完成前不应该知道的信息，导致信息泄露data leakage。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANN Building</title>
      <link href="/2022/02/21/ANN%20Building/"/>
      <url>/2022/02/21/ANN%20Building/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul><li><p>Install Theano <code>pip3 install theano</code>：</p><ul><li><p>开源数值计算库，适用于<font color="red">快速数值计算</font>，因为它与<code>NumPy</code>紧密整合。</p></li><li><p>可以在CPU和GPU上运行（处理Graphic Task）</p><blockquote><p>GPU更适用于<strong>高强度运算</strong>和<strong>并行运算</strong></p></blockquote></li></ul></li><li><p>Install Tensorflow <code>pip3 install tensorflow</code>：</p><ul><li>开源数值计算库，擅长<font color="red">高速计算</font></li><li>可以在CPU和GPU上运行</li></ul></li><li><p>Install Keras<code>conda install -c conda-forge keras</code>：</p><ul><li>非常适合建立DL模型 - 代码少</li><li>在Theano和Tensorflow基础上搭建和运行 - 像sklearn</li></ul></li></ul><p><code>conda update --all</code>：更新所有anaconda内容</p><ul><li>Set right working directory</li></ul><h2 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h2><ol><li><p>导入包</p></li><li><p>导入数据集，拆分特征矩阵和因变量向量</p></li><li><p>Encoding categorical data</p><ul><li><p>因为这次因变量已经是1,0了，所以不需要encode</p></li><li><p><code>&#39;categorical_features&#39;</code> 已经被sklearn删掉了</p><p>encoding部分的代码详见<a href="https://stackoverflow.com/questions/59476165/typeerror-init-got-an-unexpected-keyword-argument-categorical-features">stackoverflow</a></p></li><li><p><font color="red">虚拟变量陷阱</font>：不是很懂，需要继续研究</p><p>引入<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8F%98%E9%87%8F">虚拟变量</a>时要求如果有<font color="red">m</font>个定性解释变量，在<a href="https://baike.baidu.com/item/%E6%A8%A1%E5%9E%8B">模型</a>中引入<font color="red">m-1</font>个虚拟变量。否则，如果引入m个<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8F%98%E9%87%8F">虚拟变量</a>，就会导致模型解释变量间出现完全共线性的情况。我们一般称由于引入<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8F%98%E9%87%8F">虚拟变量</a>个数与定性因素个数相同出现的模型无法估计的问题，称为”虚拟变量陷阱”</p><blockquote><p>一开始我以为是处理了国家和性别两个字段，所以虚拟变量应该是2-1&#x3D;1个，但是性别其实是不算的，虚拟变量的个数是指，国家字段里有三个国家，所以虚拟变量就是2个！因此删掉首列。</p></blockquote></li></ul></li></ol><h2 id="Creating-ANN-model"><a href="#Creating-ANN-model" class="headerlink" title="Creating ANN model"></a>Creating ANN model</h2><blockquote><p>要import keras，需要TensorFlow环境</p><p>M1装个TensorFlow真的太累了，根据<a href="https://www.cnblogs.com/dangui/p/15128418.html">大佬的教程</a>终于搞定了，需要把其他library都重新装一下，anaconda的环境换成TensorFlow安装对应的低版本python。</p></blockquote><ol><li><p><strong>导入包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br></pre></td></tr></table></figure><p><code>Sequential</code>：顺序模型是多个网络层的线性堆叠。</p><p><code>Dense</code>：<strong>密度函数</strong>，常用的的全连接层。</p></li><li><p><strong>初始化ANN</strong></p><ol><li><font color="red">定义各层的顺序</font>（Recommended）</li><li>定义ANN图形</li></ol></li><li><p><strong>添加ANN的每一层</strong></p><ul><li>首先需要initialise the weights to small numbers close to 0 but not 0 - <code>Dense</code></li><li>选择激活函数 - 输出概率值 - hidden用rectifier，output有sigmoid</li></ul><ol><li><p>Dense定义每一层，是通过<font color="red">定义隐藏层</font>，从而能定义<font color="red">输入层</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classifier.add(Dense(activation=<span class="string">&quot;relu&quot;</span>, units=<span class="number">6</span>, kernel_initializer=<span class="string">&quot;uniform&quot;</span>, input_dim = <span class="number">11</span>))</span><br></pre></td></tr></table></figure><p><code>activation</code>：hidden使用的激活函数，<code>&#39;relu&#39;</code>指的是rectifier。</p><p><code>units</code>：隐藏层的神经元个数。</p><blockquote><p>Tips: 隐藏层neorun个数 &#x3D; (输入层neorun个数+输出层neorun个数) &#x2F; 2</p><p>或者就需要<code>parameter tuning</code></p></blockquote><p><code>kernel_initializer</code>：Initializer for the <code>kernel</code> weights matrix. <code>&#39;uniform&#39;</code>均值分布</p><p><code>input_dim</code>：输入层的神经元个数。</p></li><li><p>定义第二层hidden</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classifier.add(Dense(activation=<span class="string">&quot;relu&quot;</span>, units=<span class="number">6</span>, kernel_initializer=<span class="string">&quot;uniform&quot;</span>))</span><br></pre></td></tr></table></figure><p>不需要<code>input_dim</code>，因为第一层hidden已经指定了input的生成，机器知道第二层需要建在哪儿</p></li><li><p>定义<font color="red">输出层</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classifier.add(Dense(activation = <span class="string">&quot;sigmoid&quot;</span>, units = <span class="number">1</span>, kernel_initializer = <span class="string">&quot;uniform&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>tips: <code>sigmoid</code>用在输出<font color="red">1个</font>因变量的情况，<code>softmax</code>适用于输出<font color="red">2个及以上</font>因变量的情况。</p></blockquote></li></ol></li><li><p><strong>编译ANN</strong> - 对整个ANN应用随机梯度下降算法和二次交叉熵loss function</p><p>对数损失函数 logarithmic loss</p><p>因为因变量是二元的，所以损失函数<font color="red">二元交叉熵</font>binary cross entropy；如果是多元的，损失函数<font color="red">分类交叉熵</font>categorical cross entropy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classifier.<span class="built_in">compile</span>(optimizer = <span class="string">&quot;adam&quot;</span>, loss = <span class="string">&#x27;binary_crossentropy&#x27;</span>, metrics = [<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p><code>optimizer</code> : str (name of optimizer) or optimizer object.</p><p><code>loss</code>: str(name of objective function) or objective function.</p><p><code>metrics</code>: 是<code>[]</code>，list of metrics to be evaluated by the model.</p></li><li><p><strong>训练ANN</strong> - Training ANN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classifier.fit(X_train, y_train, batch_size = <span class="number">10</span>, nb_epoch = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><code>batch_size</code>:  Integer or <code>None</code>. Number of samples per gradient update. If unspecified, <code>batch_size</code> will default to 32. </p><p>整数或无。每次梯度更新的样本数。如果未指定，batch_size 将默认为 32。</p><p><code>nb_epoch</code>: Integer. Number of epochs to train the model. An epoch is an iteration over the entire <code>x</code> and <code>y</code> data provided (unless the <code>steps_per_epoch</code> flag is set to something other than None).</p><p>整数。训练模型的时期数。一个epoch是对提供的整个 x 和 y 数据的迭代（除非 steps_per_epoch 标志设置为 None 以外的值）。</p></li><li><p><strong>预测ANN</strong> - Testing ANN</p><p><code>y_pred = classifier.predict(X_test)</code></p></li><li><p><strong>查看模型预测结果</strong> - 混淆矩阵</p><p>因为本来结果是精确数值，需要设置成T&#x2F;F以便于y_test比较得出正确率，所以通过设定阈值可以解决这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred = (y_pred &gt; 0.5)</span><br></pre></td></tr></table></figure><p>y_pred: &gt;0.5的就是true，&lt;0.5就是false <code>y_pred = (y_pred &gt; 0.5)</code></p><p><a href="https://blog.csdn.net/seagal890/article/details/105059498">混淆矩阵</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.metrics import confusion_matrix</span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br></pre></td></tr></table></figure><p><img src="file:///Users/vegahuang/Library/Application%20Support/typora-user-images/image-20220222153352893.png?lastModify=1645504832" alt="image-20220222153352893"></p><p>1546+142是预测正确的，263+49是预测错误的</p><p>Accuracy &#x3D; (1546+142)&#x2F;2000 &#x3D; 0.844</p></li></ol><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Predict if the customer with the following information will leave the bank:</span></span><br><span class="line"><span class="string">Geography: France</span></span><br><span class="line"><span class="string">Credit Score: 600</span></span><br><span class="line"><span class="string">Gender: Male</span></span><br><span class="line"><span class="string">Age: 40</span></span><br><span class="line"><span class="string">Tenure: 3</span></span><br><span class="line"><span class="string">Balance: 60000</span></span><br><span class="line"><span class="string">Number of Products: 2</span></span><br><span class="line"><span class="string">Has Credit Card: Yes</span></span><br><span class="line"><span class="string">Is Active Member: Yes</span></span><br><span class="line"><span class="string">Estimated Salary: 50000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">new_prediction = classifier.predict(sc.transform(np.array([[<span class="number">0.0</span>, <span class="number">0</span>, <span class="number">600</span>, <span class="number">1</span>, <span class="number">40</span>, <span class="number">3</span>, <span class="number">60000</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">50000</span>]])))</span><br><span class="line">new_prediction = (new_prediction &gt; <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>单值预测流程：</p><ul><li>我们需要把这个客户的信息放进一行：双重中括号，<code>[]</code>意味着括号内的所有内容会以列的形式出现，<code>[[]]</code>就会建立一个二维数组，括号里的内容就会放进这个二维数组的第一行。</li><li>先要确认信息的顺序和X特征矩阵里的feature顺序<font color="red">一致</font></li><li>然后对照已有的X特征矩阵，查看如<code>Geography</code> &#x2F; <code>Gender</code>这种虚拟变量分别对应的值，填入表达式。</li><li>输入的是原始值，所以需要与X_train同样的scaling，直接套用sc进行标准化，第一个int记得携程x.0，这样标准化后转换成float不会报错</li><li>预测，将预测的概率值转换成True&#x2F;False输出预测结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
          <category> ANN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANN Intuition</title>
      <link href="/2022/02/20/DL-ANN/"/>
      <url>/2022/02/20/DL-ANN/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><h3 id="The-neuron"><a href="#The-neuron" class="headerlink" title="The neuron"></a>The neuron</h3><p>Components: Dendrites树突 –&gt; Neuron神经元 –&gt; Axon轴突</p><ul><li>Dendrites: signal receiver 信号接收</li><li>Axo: signal transmitter 信号发送</li></ul><p>∴ 信号传递的机制称为<strong>突触</strong> synapse - 就是神经网络里里连接神经元的<strong>线</strong></p><hr><p>Input processing</p><p>∵ 值都<strong>类似</strong>， 神经网络更好处理，模型才会更好</p><p>∴ input value needs to be <strong>pre-processing</strong>:</p><ul><li><p><strong>standardize</strong> 标准化 - average &#x3D; 0, variance方差 &#x3D; 1</p></li><li><p><strong>normalize</strong> 归一化 - 基于数据范围，把数据转化为0~1之间的值<br>$$<br>\frac{min} {max-min}<br>$$<br>ref. <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf">Efficient BackProp</a></p></li><li><p>所有值会被<strong>累加</strong>起来 or 乘以<strong>权重值</strong>再累加起来, etc.</p></li></ul><p>Output value can be:</p><ul><li>Continuous (price)</li><li>Binary (will exit yes&#x2F;no)</li><li>Categorical</li></ul><hr><p>Synapses</p><p>All synapses have <strong>weight</strong></p><p>Deciding <strong>Priority</strong>: <strong>Adjust the weight</strong> to decide which neuron is most important and which one is not.</p><p>各种算法基本就是在调参</p><p>Signals进入neuron后：</p><ol><li>计算得出加权和</li><li>运用activation function激活函数</li><li>neuron把signal沿着synapse transfer to the next neuron</li></ol><h2 id="The-Activation-Function"><a href="#The-Activation-Function" class="headerlink" title="The Activation Function"></a>The Activation Function</h2><ol><li><p>Threshold Function 阈值函数 - Y&#x2F;N function</p><p>​    ϕ(x) &#x3D; 1 if x ≥ 0</p><p>​    ϕ(x) &#x3D; 0 if x &lt; 0</p><p>Result: <code>Yes</code> or <code>No</code></p></li><li><p>Sigmoid Funtion<br>$$<br>\phi(x) &#x3D; \frac{1}{1+e^{-x}}<br>$$<br>x是输入加权和</p><p>​    输入值 &lt; 0， 输出趋近于0 –&gt; 放弃这个输入</p><p>​    输入值 &gt; 0， 输出趋近于1 –&gt; 通过这个输入</p><p>比阈值函数Smooth，擅长预测可能性（概率）</p></li><li><p><strong>Rectifier</strong> Function 整流函数</p><p>​    输入值 &lt; 0，输出 &#x3D; 0</p><p>​    输入值 ≥ 0，输出会随着输入值增加而<strong>逐渐增加</strong></p><p>ref. [<a href="http://jmlr.org/proceedings/papers/v15/glorot11a/glorot11a.pdf">Deep sparse rectifier neural networks</a>]</p></li><li><p>Hyperbolic tangent Function 双曲正切函数 - 很像Sigmoid<br>$$<br>\phi(x) &#x3D; \frac{1 - e^{-2x}}{1 + e^{-2x}}<br>$$</p></li></ol><p>常用<strong>预测概率值</strong>的组合：</p><p>Hidden layer –&gt; Rectifier</p><p>Output layer –&gt; Sigmoid</p><h2 id="How-do-Neural-Networks-work"><a href="#How-do-Neural-Networks-work" class="headerlink" title="How do Neural Networks work?"></a>How do Neural Networks work?</h2><p>最基本的神经网络结构 - 已经可以完成大部分ML算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A(Area feet^2) --&gt;E(calculate)</span><br><span class="line">    B(Bedrooms) --&gt; E(calculate)</span><br><span class="line">    C(Distance to city miles) --&gt; E(calculate)</span><br><span class="line">    D(Age) --&gt; E(calculate)</span><br><span class="line">    E(calculate) --Price=w1*x1+w2*x2+w3*x3+w4*x4--&gt; F(price)</span><br></pre></td></tr></table></figure><p><strong>添加Hidden layer可以提高NN预测准确率，变得更为强大</strong></p><ul><li>每个神经元认为重要的输入是<em>不同</em>的，以提取<em>不同</em>的<strong>联系</strong></li><li>每个神经元结合多个参数得到一个新参数 - 更加准确</li><li>神经元还可能发现我们不曾发现的自变量之间的<strong>新关联</strong></li></ul><p>∴ Hidden layer提高了NN的灵活性，让NN可以寻找那些特别的特征并把他们结合起来考虑。</p><h2 id="How-do-Neural-Networks-learn"><a href="#How-do-Neural-Networks-learn" class="headerlink" title="How do Neural Networks learn?"></a>How do Neural Networks learn?</h2><ol><li><p>hard-coded coding 硬编码 - 常规SE</p><p>把特殊规则和想要的输出直接告诉程序，带领它的整个运行过程，并指定程序可能要处理的各种情况。</p></li><li><p><strong>Mechanism</strong></p><p>建立神经网络，告诉它哪个是输入哪个是输出，然后让机器自己去寻找确定其它的规则。</p></li></ol><p>Learning process - <strong>Backpropogation反向传播算法</strong>:</p><ol><li>Compare ŷ to y</li><li><strong>Loss fucntion损失函数计算差值</strong>  $C &#x3D; \frac{1}{2}(\hat{y}-y)^2$</li><li>将损失函数的结果<strong>反馈</strong>给NN，</li><li>为了<strong>最小化损失函数</strong>，差值结果被传递到了<strong>权重</strong>部分，权重因此被<strong>更新</strong></li></ol><p>ref. [<a href="http://stats.stackexchange.com/questions/154879/a-list-of-cost-functions-used-in-neural-networks-alongside-applications">A list of cost functions used in neural networks, alongside applications</a>]</p><p>交叉验证 &#x2F; 损失函数</p><hr><p>A basic NN example:</p><p>Feedforward neural network单层前馈神经网络 &#x3D; perceptron感知机 （cr. Frank Rosenblatt)</p><p>只有一层hidden layer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A(X1) --&gt;E(加权求和)</span><br><span class="line">    B(X2) --&gt; E(加权求和)</span><br><span class="line">    C(Xm) --&gt; E(加权求和)</span><br><span class="line">    E(加权求和) --activation functions--&gt; F(ŷ)</span><br></pre></td></tr></table></figure><blockquote><p>y是真实世界的真实值，ŷ代表输出值，是由NN和算法预测的值</p></blockquote><p>A multiple rows example:</p><blockquote><p>epoch:  <em>epoch是</em>一个单位。 一个epoch表示学习中<strong>所有</strong>训练数据均<strong>被使用过一次</strong>时的<strong>更新次数</strong>。</p></blockquote><p>损失函数是<strong>所有差值</strong>的平方和的二分之一 $C &#x3D; \Sigma \frac{1}{2}(\hat{y}-y)^2$</p><h2 id="Gradient-Descent-梯度下降"><a href="#Gradient-Descent-梯度下降" class="headerlink" title="Gradient Descent 梯度下降"></a>Gradient Descent 梯度下降</h2><p>用途：最小化损失函数</p><p>方法：</p><ol><li><p>简单匹配算法</p><p>画个图很容易发现最低点，但是随着<strong>权重数目</strong>的增加，NN里的<strong>突触数目</strong>也会增加，会引发维数灾难<strong>Curse of Dimensionality</strong></p><p>e.g. 25个weight –&gt; 就算全世界最快的计算机，也要计算$3.42 \times 10^{50}$年，是<strong>绝对不可能</strong>的。</p></li><li><p><strong>Gradient Descent</strong></p><ol><li><p>从曲线上的某一点开始</p></li><li><p>求导，找出那一点的斜率<strong>slope</strong>，并确定<strong>正负</strong>：负的往下（右）走，正的往上（左）走</p></li><li><p>重复计算，移动点</p></li><li><p>直到找到最优权重</p><blockquote><p>Q: 为什么话超下走不会朝上走，不会跳出损失函数的曲线？</p><p>A: 依赖于<strong>参数调节</strong>，之后会说到</p></blockquote></li></ol></li></ol><h2 id="Stochastic-Gradient-Descent-随机梯度下降"><a href="#Stochastic-Gradient-Descent-随机梯度下降" class="headerlink" title="Stochastic Gradient Descent 随机梯度下降"></a>Stochastic Gradient Descent 随机梯度下降</h2><p>需要它的原因：</p><p>梯度下降要求损失函数<strong>必须是凹函数</strong>，因此可以得到正确的权重；但当我们的损失函数<strong>不是凹函数</strong>时，比如我们选择的损失函数虽然是凹函数但是在<strong>多维空间</strong>里他会转换成<strong>非凹函数</strong>。这种情况下找到的是损失函数的一个<strong>局部最小值</strong>，而不是全局最小值，会得到<strong>错误的权重</strong>。</p><p>所以这种时候，需要<strong>随机梯度下降</strong>。</p><p>随机梯度下降<strong>避免</strong>了<strong>选中局部极值</strong>。</p><ul><li>因为它可以包容这种波动，它一次只做一次迭代，因而计算过程中波动就会大很多，就更有可能找到全局最小值global minimum而不是局部的。</li></ul><p>梯度下降 vs. 随机梯度下降</p><p><strong>工作机制差异</strong></p><table><thead><tr><th align="left">梯度下降</th><th>随机梯度下降</th></tr></thead><tbody><tr><td align="left">batch，运行了NN上所有行的数据后再调整权重</td><td>运行一行数据就调整对应的权重，重复</td></tr><tr><td align="left">需要把所有data都上载到ram里才可以运行</td><td>不需要把all data都上载到ram里再运行，速度更快</td></tr><tr><td align="left">确定性算法，只要NN权重的初始值一样，每次梯度下降都会有一样的结果</td><td>随机算法，即使初始值一样，因为不同的训练过程，每次随机梯度下降结果会随机</td></tr></tbody></table><hr><p>Mini batch gradient descent 小批量梯度下降</p><p>结合normal和随机的优点，可以自己设置每次运行多少行数后调整权重</p><p>ref. </p><p>梯度下降[<a href="https://iamtrask.github.io/2015/07/27/python-network-part2/">A Neural Network in 13 lines of Python (Part 2 – Gradient Descent)</a>]</p><p>算法的数学机制 [<a href="http://neuralnetworksanddeeplearning.com/chap2.html">Neural Networks and Deep Learning</a>]</p><h2 id="Backpropagation-反向传播算法"><a href="#Backpropagation-反向传播算法" class="headerlink" title="Backpropagation 反向传播算法"></a>Backpropagation 反向传播算法</h2><p>计算损失函数反馈给NN的权重部分调整权重就是Backpropagation</p><p>核心&amp;基础&amp;优势：</p><p>由于这个算法的结构特点，能够使我们<strong>同时调整所有的权重</strong>，这样就能知道<strong>哪一部分误差是由NN的哪个权重引起的</strong>。</p><p>Training the ANN with Stochastic Gradient Descent</p><ol><li><p>Randomly initialise the weights to small numbers close to 0 (but not 0).</p><p>赋予权重接近0但不是0的很小的随机数 - <strong>权重的初始值</strong></p></li><li><p>Input the first observation of your dataset in the input layer. Each feature is in one input node.</p><p>在输入层中输入数据集的第一个观察值。每个特征都在一个输入节点中。</p></li><li><p>Forward-Propagation前向传播: <strong>from left to right</strong>, the neurons are activated in a way that the impact of each neuron’s activation is limited by the weights. Propagate the activations until getting the predicted result ŷ.</p><p><strong>从左到右</strong>，神经元被激活的方式是每个神经元激活的影响受到权重的限制。传播激活直到得到预测结果 ŷ。</p></li><li><p>Compare the predicted result ŷ to the actual result y. Measure the generated error.</p><p>比较预测值ŷ和真实值y，计算误差。</p></li><li><p><strong>Back-Propagation</strong>反向传播: <strong>from right to left</strong>, the error is back-propagated. Update the weights according to how much they are responsible for the error. The <strong>learning rate</strong> decides by how much we update the weights.</p><p><strong>从右到左</strong>，误差是反向传播的。根据他们对错误负责的程度更新权重。<strong>学习率</strong>取决于我们<strong>对权重进行了多少调整</strong>。</p><blockquote><p>learning rate学习率就是NN中可以控制的一个<strong>参数</strong></p></blockquote></li><li><p>Repeat Steps 1 to 5 and update the weights after each observation (<strong>Reinforcement Learning</strong>). Or: Repeat Steps 1 to 5 but update the weights only after a batch of observations (<strong>Batch Learning</strong>).</p><p>重复步骤 1 到 5，并在<strong>每次</strong>观察后更新权重（<strong>强化学习</strong>）</p><p>或者：</p><p>重复步骤 1 到 5，但<strong>仅在一批</strong>观察后更新权重（<strong>批量学习</strong>）</p></li><li><p>When the whole training set passed through the ANN, that makes an <strong>epoch</strong>. Redo more epochs.</p><p>当整个训练集通过 ANN 时，就形成了一个 <strong>epoch</strong>。继续重做更多的<strong>epoch</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
          <category> ANN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning Basic Concepts</title>
      <link href="/2022/02/20/DL/"/>
      <url>/2022/02/20/DL/</url>
      
        <content type="html"><![CDATA[<p>Neural network and Deep Learning need:</p><ol><li><p>A lot of data</p><p>Data Storage Development:</p><p>Hard disk –&gt; Flash memory –&gt; Bacterial DNA 细菌DNA</p><p>∴ We now have enough data to <strong>handle sophisticated models</strong>.</p></li><li><p>Strong processing power - Need strong computers</p></li></ol><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>Deep Learning</p><ul><li><p>Founder: Geoffrey Hinton</p></li><li><p>Why: Look at the human brain and <strong>mimic</strong> how it operates and re-create the actions.</p></li><li><p>Usage: Leverage what natural selection has already decided for humans.</p></li></ul><p>Neural Network</p><ul><li>Why: Re-create the human brain in computer.</li><li>How: An <strong>artificial structure</strong>(artificial neural net):<ul><li>Elements: <strong>Nodes(Neurons神经元)</strong></li><li>Process: Input layer to <strong>input data</strong> –&gt; **Hidden layer to process 真正研究的 –&gt; Output layer to <strong>predict</strong></li></ul></li></ul><h2 id="Working-environment"><a href="#Working-environment" class="headerlink" title="Working environment"></a>Working environment</h2><p>Anaconda: Pre-packaged solution</p><ul><li>Python</li><li>IDEs</li><li>Libraries e.g. NumPy, Pandas, etc.</li></ul><p>Spyder: IDE choice</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap5 Notes</title>
      <link href="/2022/02/20/Bootstrap5%20Notes/"/>
      <url>/2022/02/20/Bootstrap5%20Notes/</url>
      
        <content type="html"><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>A bunch of code that was written to be <strong>reusable</strong> that you can drop into your site, making design easier.</p><p>一个popular的前端UI框架 - CSS</p><p>Pros:</p><ul><li>make websites being more <strong>responsive</strong> - An adaptable layout</li><li>Lots of <strong>pre-styled elements</strong> can be simply dropped into the website.</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p><strong>Direct HTML link</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Starter template on <a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/">Bootstrap</a></p></li><li><p><del>Download .zip file on Bootstrap - latency</del></p></li></ol><h2 id="Web-design-at-first"><a href="#Web-design-at-first" class="headerlink" title="Web design at first"></a>Web design at first</h2><p><strong>Wireframing</strong>: a <strong>low fidelity</strong> representation of your design 您的设计的低保真表示</p><p><strong>Mock-up</strong>: a <strong>high fidelity</strong> representation of your design 您的设计的高保真表示</p><p>建议使用原型设计工具：</p><ol><li>Axure</li><li>Sketch - app比较好使</li></ol><p>在线工具：<a href="https://balsamiq.cloud/">Balsamiq</a></p><h2 id="Navbar"><a href="#Navbar" class="headerlink" title="Navbar"></a>Navbar</h2><p>Guidance on <a href="https://getbootstrap.com/docs/5.1/components/navbar/">Bootstrap&#x2F;Components&#x2F;Navbar</a></p><h2 id="Tindog-Project-Foundation"><a href="#Tindog-Project-Foundation" class="headerlink" title="Tindog Project Foundation"></a>Tindog Project Foundation</h2><blockquote><p>section vs. div: <a href="https://blog.csdn.net/qq_38922435/article/details/80465989">html5中的div和section, article, aside的用法</a></p></blockquote><p>关于CSS link的顺序：</p><ul><li>Bootstrap CSS link <strong>MUST go BEFORE</strong> your own CSS - 自己的css一定要放最后</li><li>css文件放head里面，防止布局错乱；**<a href="https://ask.csdn.net/questions/211039">浏览器从上到下解析</a>**</li><li>js放body最后，防止js加载慢内容不显示</li></ul><blockquote><p><strong>Issue:</strong></p><p>Q: 无法将navbar的item右对齐</p><p>A: 根据<a href="https://stackoverflow.com/questions/19733447/bootstrap-navbar-with-left-center-or-right-aligned-items">stackoverflow</a> 的解答，是因为我按照angela的写法写成了<code>ml-auto</code>，但在bootstrap5中，是<code>ms-auto</code></p></blockquote><h2 id="Bootstrap-Grid-Layout-System"><a href="#Bootstrap-Grid-Layout-System" class="headerlink" title="Bootstrap Grid Layout System"></a>Bootstrap Grid Layout System</h2><p>reponsive website 响应式网站</p><ul><li>并不是指加载速度快，而是意味着对网站<strong>响应屏幕或视窗的大小反应快</strong></li></ul><p><code>Grid</code>，单行是12个block</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--class是col的话就是占满一整行，多个就是平分整行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--clo-6意味着占50%，同理col-3是三分之一，可以自由调整col宽度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:green; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这些都不会根据窗口改变而变化。</p><p><strong>Responsive Columns</strong></p><p>–&gt; 引出<code>class=&quot;clo-md-6&quot;</code></p><p>意味着我们应该有一个6个单元的列，从medium到任何大小和尺寸的设备上，都占用6个单元，都将<strong>占据整个宽度</strong></p><p>lg是large，指电脑</p><p>md是medium，指平板这种</p><p>sm是small，指手机设备</p><p>..3 &#x2F; ..4 &#x2F; ..6指的是控件占特定设备的单元数量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow; border:1px solid&quot;</span>&gt;</span></span><br><span class="line">        col4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bootstrap-Container"><a href="#Bootstrap-Container" class="headerlink" title="Bootstrap Container"></a>Bootstrap Container</h2><ul><li><p>Default container: a responsive, fixed-width container, meaning its <code>max-width</code> changes at each breakpoint.</p><p><code>&lt;div class=&quot;container&quot;&gt;</code></p></li><li><p>Fluid container: a full width container, spanning the entire width of the viewport.</p><p><code>&lt;div class=&quot;container-fluid&quot;&gt;</code></p></li></ul><h2 id="Bootstrap-Button-amp-Font-Awesome"><a href="#Bootstrap-Button-amp-Font-Awesome" class="headerlink" title="Bootstrap Button &amp; Font Awesome"></a>Bootstrap Button &amp; Font Awesome</h2><ul><li><p>Button有很多的class，直接套用就行，size不用css调</p></li><li><p><a href="https://fontawesome.com/">Font Awesome</a>是一个免费的icon library，很好用，但一定要记得head里加kit</p></li><li><p>旋转图片</p><p> <code>&#123;transform: rotate(30deg);&#125;</code> 顺时针向右</p><p><code>&#123;transform: rotate(-30deg);&#125;</code> 逆时针向左</p></li></ul><h2 id="Bootstrap-Carousel-轮播"><a href="#Bootstrap-Carousel-轮播" class="headerlink" title="Bootstrap Carousel 轮播"></a>Bootstrap Carousel 轮播</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;testimonials&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;testimonial-carousel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-bs-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在网站上展示的第一页需要设定为active--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item active&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>I no longer have to sniff other dogs for love. I&#x27;ve found the hottest Corgi on TinDog. Woof.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;testimonial-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/dog-img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog-profile&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">em</span>&gt;</span>Pebbles, New York<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;testimonial-text&quot;</span>&gt;</span>My dog used to be so lonely, but with TinDog&#x27;s help, they&#x27;ve found the love of their life. I think.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;testimonial-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/lady-img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;lady-profile&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">em</span>&gt;</span>Beverly, Illinois<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#testimonial-carousel&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-prev-icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#testimonial-carousel&quot;</span> <span class="attr">data-bs-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;carousel-control-next-icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Bootstrap5语法大变动，还是得参考文档<ul><li><code>data-bs-ride</code> 替换<code>data-ride</code></li><li><code>data-bs-target</code> 替换<code>data-slide</code></li><li><code>class=&quot;visually-hidden&quot;</code>替换<code>class=&quot;sr-only&quot;</code></li></ul></li></ul><h2 id="Bootstrap-Cards"><a href="#Bootstrap-Cards" class="headerlink" title="Bootstrap Cards"></a>Bootstrap Cards</h2><ul><li><code>card-deck</code>在bootstrap5.1中更改为<code>card-group</code>，见<a href="https://getbootstrap.com/docs/5.1/components/card/#card-groups">文档</a> ，可以将卡片并列摆放</li><li><code>btn-primary</code>: 设定元素为蓝色底色，且显示白色文字</li><li><code>w-100</code>替代了<code>btn-block</code>，指该button占据parent的100%</li></ul><h2 id="The-CSS-Z-Index-and-Stacking-Order"><a href="#The-CSS-Z-Index-and-Stacking-Order" class="headerlink" title="The CSS Z-Index and Stacking Order"></a>The CSS Z-Index and Stacking Order</h2><p>CSS Z-Index和堆叠顺序，参考83的资源</p><p>让x置于y之上的方法：</p><ol><li><p>使他们在不同层 - <font color="red">嵌套</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">    red</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">    yellow</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Children sit on top of their parent.</p></li><li><p>使他们在同一层 - 自然堆叠顺序 natural stacking order</p><p>–&gt; 越先定义的element，越底层</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">    red</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">    yellow</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span><br><span class="line">    blue</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>结果是只有一个100px*100px的蓝色div –&gt; 1：蓝色，2：黄色，3最底层：红色</p></li><li><p>Using CSS - <code>z-index</code></p><p><code>z-index: 1;</code> - 置于顶层；</p><p><code>z-index: -1;</code> - 置于底层。</p><blockquote><p>当所有元素的<code>z-index</code>都相同时，就是原始的堆叠顺序了。</p><p>元素position不是absolute&#x2F;relative&#x2F;fixed，即它们没有堆叠的时候，<code>z-index</code>是无效的</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title Image */</span></span><br><span class="line">  <span class="selector-class">.title-image-col</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.rotated</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">25deg</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Features */</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#features</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>难点：</p><ul><li><code>.rotated</code>图片不能直接<code>z-index: -1</code>，会使其在所有元素之后，就看不见了，我们只是要他在<code>#features</code>下面</li><li>所以思路是让<code>#features</code>on top</li><li><code>#features</code>的<code>position: absolute</code>的情况下，下面<code>#testimonials</code>模块就会顶上来，所以<code>position: relative</code>才能实现情况。</li></ul><blockquote><p>position再复习一下：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#%E5%8F%96%E5%80%BC">mdn</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first Blog</title>
      <link href="/2022/02/19/My-first-Blog/"/>
      <url>/2022/02/19/My-first-Blog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS Notes</title>
      <link href="/2022/02/19/CSS%20Note/"/>
      <url>/2022/02/19/CSS%20Note/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>CSS: Cascading Style Sheets 层叠样式表</strong></p><h2 id="Inline-CSS"><a href="#Inline-CSS" class="headerlink" title="Inline CSS"></a>Inline CSS</h2><p>内联: cannot implement to all tags in the webpage at once, need to be revised one by one</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:cornsilk;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Internal-CSS"><a href="#Internal-CSS" class="headerlink" title="Internal CSS"></a>Internal CSS</h2><p>内部: cannot be consistent across the website, cannot carry over to all other web pages on the website.<br>Solution:<br>A single location where when the CSS styles have been changed in that one location, then everything gets reflected across our website in all of the pages.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>❤️Vega&#x27;s Personal Site<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:cornsilk;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    hr&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-style</span>:none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>:<span class="number">7px</span> dotted grey;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">4%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="border-style-syntax"><a href="#border-style-syntax" class="headerlink" title="border-style syntax"></a>border-style syntax</h3><ul><li>The border-style property may be specified using <strong>one</strong>, <strong>two</strong>, <strong>three</strong>, or <strong>four</strong> values.<ul><li>When <strong>one</strong> value is specified, it applies the same style to all four sides.</li><li>When <strong>two</strong> values are specified, the first style applies to the top and bottom, the second to the left and right.</li><li>When <strong>three</strong> values are specified, the first style applies to the top, the second to the left and right, the third to the bottom.</li><li>When <strong>four</strong> values are specified, the styles apply to the top, right, bottom, and left in that order (clockwise).</li></ul></li></ul><h2 id="External-CSS"><a href="#External-CSS" class="headerlink" title="External CSS"></a>External CSS</h2><p>make pages consistent<br><code>&lt;link rel=&quot;stylessheet&quot; href=&quot;css/style.css&quot;&gt;</code><br><img width="810" alt="image" src="https://user-images.githubusercontent.com/97777280/154622209-911f7e08-cbf5-49f7-8322-ead21b6d5298.png"></p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>style priority:  </p><ol><li>inline CSS</li><li>internal CSS</li><li>external CSS</li></ol><h2 id="CSS-Syntax"><a href="#CSS-Syntax" class="headerlink" title="CSS Syntax"></a>CSS Syntax</h2><p><code>selector &#123;property:value;&#125;</code><br>Keep all of rules in alphabetical order</p><h2 id="CSS-Selectors"><a href="#CSS-Selectors" class="headerlink" title="CSS Selectors"></a>CSS Selectors</h2><p><code>selector &#123;property:value;&#125;</code> - Tag Selectors<br><code>class=&quot;&quot;</code> - Class Selectors - differentiate all of different HTML elements, making specific styling</p><h2 id="Classes-vs-Ids"><a href="#Classes-vs-Ids" class="headerlink" title="Classes vs. Ids"></a>Classes vs. Ids</h2><p>Identify HTML elements</p><ul><li><code>id</code> is unique inside a single page.<ul><li>identify elements where there is only a single one of them on a particular page.</li><li>it’s not suggested to be used in CSS styling.</li></ul></li><li><code>class</code> can be the same, and each element can have several classes.<ul><li>group related elements that are all going to behave or have a similar style.</li></ul><p><strong>Pseudo class</strong><br>伪类：添加到选择器的关键字，指定要选择的元素的特殊状态。例如，:hover 可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img:hover &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Intermediate"><a href="#Intermediate" class="headerlink" title="Intermediate"></a>Intermediate</h1><h2 id="Favicons"><a href="#Favicons" class="headerlink" title="Favicons"></a>Favicons</h2><p>Favicon是favorites icon的缩写，亦被称为website icon、page icon或urlicon。Favicon是与某个网站或网页相关联的图标。网站设计者可以多种方式创建这种图标，而目前也有很多网页浏览器支持此功能。</p><h2 id="HTML-Divs"><a href="#HTML-Divs" class="headerlink" title="HTML Divs"></a>HTML Divs</h2><p><code>div</code> - A content division element that allows to divide content up on the website so that we can structure each div separately.</p><ul><li>Don’t do anything unless using CSS</li></ul><h2 id="Box-Model"><a href="#Box-Model" class="headerlink" title="Box Model"></a>Box Model</h2><ul><li>height &amp; width: static value or percentage</li><li>border: <code>&#123;border-width:0px;&#125;</code> &#x2F; <code>&#123;border-width:0px 10px 20px 10px;&#125;</code></li><li>padding: <code>&#123;padding：20px;&#125;</code> - 内容离box边缘的距离</li><li>margin: <code>&#123;margin:20px;&#125;</code> - box离viewspot的距离</li></ul><h2 id="CSS-Display-Property"><a href="#CSS-Display-Property" class="headerlink" title="CSS Display Property"></a>CSS Display Property</h2><p>CSS显示属性<br>CSS<code>display</code> Swift between Block and Inline</p><ul><li>Block: Take a whole width of the screen on a web page by default. 可以调整高度宽度<ul><li>Paragraphs <code>&lt;p&gt;</code></li><li>Headers <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code></li><li>Divisions <code>&lt;div&gt;</code></li><li>Lists and list items <code>&lt;ol&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;li&gt;</code></li><li>Forms <code>&lt;form&gt;</code></li></ul></li><li>Inline - 可以同一行，但是高度宽度无法调整，是根据内容固定的<ul><li>Spans <code>span</code>: Select one part of the text.</li><li>Images <code>&lt;img&gt;</code></li><li>Anchors <code>&lt;a&gt;</code></li></ul></li><li>Inline-Block</li><li>None<ul><li><code>&#123;display:none&#125;</code>:消失，不保留位置</li><li><code>&#123;visiblity:hidden&#125;</code>:消失，保留位置</li></ul></li></ul><h2 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><p>Lesson 97<br>Readability &amp; Legibility<br>Prefer 2 fonts in one design<br>Serif typeface - 字母下面有脚脚</p><ul><li>Old Style</li><li>Transitional</li><li>Modern</li><li><strong>Slab-Serif</strong><br>Sans-serif</li></ul><h2 id="CSS-Static-and-Relative-Positioning"><a href="#CSS-Static-and-Relative-Positioning" class="headerlink" title="CSS Static and Relative Positioning"></a>CSS Static and Relative Positioning</h2><p>Rules:  </p><ol><li>Content is Everything</li><li>Order Comes From Code</li><li>Children Sit On Parents</li></ol><p><strong>Postion</strong>  </p><ul><li>Static(Default)</li><li>Relative</li><li>和margin不同的是，relative会保留其他element不变化（可能产生覆盖），margin会让其他element跟着一起动 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line"> position: relative;</span><br><span class="line"> right: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Absolute: 是element相对于其parent div的位置，常指整个页面<blockquote><p>absolute是绝对定位；而relative是相对定位； 解释： 绝对定位就是相对于父元素的定位，不受父元素内其他子元素的影响；而相对定位是相对于同级元素的定位，也就是上一个同级元素!</p></blockquote></li><li>Fixd：导航栏就是这样的，翻页不动项</li></ul><p><strong>Coordinates</strong>  </p><ul><li>Top</li><li>Bottom</li><li>Left</li><li>Right</li></ul><h2 id="Center-the-elements"><a href="#Center-the-elements" class="headerlink" title="Center the elements"></a>Center the elements</h2><p><code>&#123;text-align: center&#125;</code> - be set inside the parent container.<br><code>&#123;margin: 0 auto 0 auto&#125;</code> - auto代表自动纵向横向的居中，用在有width限制的element上</p><h2 id="Font-Styling"><a href="#Font-Styling" class="headerlink" title="Font Styling"></a>Font Styling</h2><p>内置字体：</p><ol><li>Serif - default: Times</li><li>Sans-serif - default: Arial  <code>&#123;font-family: verdana, sans-serif;&#125;</code></li><li>Monospace - 常用于展示代码，易读性强</li></ol><p>如果想确保未安装首选字体的设备可以正常浏览，可以由specific –&gt; less specific顺序依次指定展示的字体  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Font Embedding: 如果希望所有设备都浏览到指定的字体 have the same viewing experience  </p><h2 id="CSS-Sizing"><a href="#CSS-Sizing" class="headerlink" title="CSS Sizing"></a>CSS Sizing</h2><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><table><thead><tr><th>单位</th><th>分类</th><th>特点</th><th>换算</th></tr></thead><tbody><tr><td>em</td><td>Dynamic</td><td>1em代表一个大写M的size, <strong>value在parent body的size上累加</strong></td><td>1em</td></tr><tr><td>px</td><td>Static</td><td>parent变它不变</td><td>16px</td></tr><tr><td>%</td><td>Dynamic</td><td><strong>value在parent body的size上累加</strong></td><td>100%</td></tr><tr><td>rem</td><td>Dynamic</td><td>CSS3, ignore all of the parent settings for the font size and set it to this relative to the root.忽略字体大小的所有父设置，并将其设置为此相对于根。</td><td>1rem</td></tr></tbody></table><blockquote><p>Tip: <strong>Using <code>rem</code></strong> instead of <code>em</code> or <code>%</code></p></blockquote><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>修改文本字体颜色</p><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p>字体的粗细 - normal or bold<br>e.g. <code>&#123;font-weight: normal;&#125;</code></p><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>设置多行元素的空间量，如多行文本的间距<br>e.g. <code>&#123;line-height: 2;&#125;</code></p><h2 id="CSS-Float-and-Clear"><a href="#CSS-Float-and-Clear" class="headerlink" title="CSS Float and Clear"></a>CSS Float and Clear</h2><ul><li>float: use for <strong>wrapping</strong> not for <strong>positioning</strong> - 用position: relative &#x2F; absolute或者margin &#x2F; padding<ul><li>指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。  </li><li>value: none &#x2F; left &#x2F; right</li></ul></li><li>clear (anti-float)<ul><li>指定一个元素是否必须移动(清除浮动后)到在它之前的浮动元素下面。  </li><li>value: none &#x2F; left &#x2F; right &#x2F; both</li></ul></li></ul><blockquote><p>网页虽然差不多设置好了，但是它还不是responsive反应灵敏的 –&gt; 引出Bootstrap –&gt;让website适用于all screen sizes and all dimensions.</p></blockquote><h2 id="Media-Query-Breakpoints"><a href="#Media-Query-Breakpoints" class="headerlink" title="Media Query Breakpoints"></a>Media Query Breakpoints</h2><p>如何实现mobile-friendly？</p><ol><li><p>Make a Separate Mobile Site</p></li><li><p>Make it Responsive! - Using pure CSS - Media Query Breakpoints媒体查询断点</p><p>Media Query <code>@media &lt;type&gt; &lt;feature&gt;</code></p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">991px</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-id">#title</span> &#123;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.rotated</span>&#123;</span><br><span class="line">      <span class="attribute">position</span>: static;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>![image-20220223175316741](&#x2F;Users&#x2F;vegahuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220223175316741.png)</p><h2 id="Combining-Selectors"><a href="#Combining-Selectors" class="headerlink" title="Combining Selectors"></a>Combining Selectors</h2><h3 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors"></a>Selectors</h3><ol><li><p>Multiple Selectors</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Montserrat&quot;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Hierarchical Selectors</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container-fluid</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">3%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意味着，网页上所有是<code>container-fluid</code>的子类元素的<code>h1</code>都会加上<code>padding-top</code>和<code>text-align</code></p></li><li><p>Combined Selectors</p><p><code>selector1.selector2&#123;&#125;</code>没有空格</p><p>意味着所有选择器必须在同一个html元素中</p></li></ol><blockquote><p>有空间结构，从右往左读</p><p>没有空间结构，从左往右读</p></blockquote><h3 id="Priority"><a href="#Priority" class="headerlink" title="Priority"></a>Priority</h3><p>inline<code>style:&quot;color: orange</code>&gt;<code>#id</code> &gt; <code>.class</code> &gt; <code>h1...</code></p><blockquote><p><code>#id</code>尽量不用，除非像carousel &#x2F; navbar这种</p><p>不惜一切代价避免内联inline样式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/19/hello-world/"/>
      <url>/2022/02/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
